- name: install php
  block:
  - name: Check if PHP is already installed with correct version
    command: php --version
    register: php_version_check
    failed_when: false
    changed_when: false

  - name: Add PPA for PHP (Ubuntu only)
    become: true
    apt_repository:
      repo: ppa:ondrej/php
      state: present
    register: php_ppa
    when: ansible_distribution == "Ubuntu" and (php_version_check.rc != 0 or php_version not in php_version_check.stdout)

  - name: Ensure GPG tools and python3-debian are available (Debian only)
    become: true
    apt:
      name: 
        - gnupg
        - python3-debian
      state: present
      update_cache: false
    when: ansible_distribution == "Debian" and (php_version_check.rc != 0 or php_version not in php_version_check.stdout)

  - name: Download and dearmor Sury PHP repository GPG key (Debian only)
    become: true
    shell: |
      curl -fsSL "https://packages.sury.org/php/apt.gpg" | gpg --dearmor -o /usr/share/keyrings/sury-php-keyring.gpg
      chmod 644 /usr/share/keyrings/sury-php-keyring.gpg
    register: php_key
    when: ansible_distribution == "Debian" and (php_version_check.rc != 0 or php_version not in php_version_check.stdout)

  - name: Add Sury PHP repository source (Debian only)
    become: true
    deb822_repository:
      name: sury-php
      types: [deb]
      uris: https://packages.sury.org/php/
      suites: ["{{ ansible_distribution_release }}"]
      components: [main]
      signed_by: /usr/share/keyrings/sury-php-keyring.gpg
      state: present
    vars:
      ansible_python_interpreter: /usr/bin/python3
    when: ansible_distribution == "Debian" and php_key is succeeded and (php_version_check.rc != 0 or php_version not in php_version_check.stdout)
    register: php_repo

  - name: Update apt package cache
    become: true
    apt:
      update_cache: yes
    when: php_install_ready

  - name: Install PHP and related packages
    become: true
    apt:
      name: "{{ item }}"
      state: present
    loop:
      - php{{ php_version }}
      - php{{ php_version }}-cli
      - php{{ php_version }}-common
      - php{{ php_version }}-mysql
      - php{{ php_version }}-xml
      - php{{ php_version }}-curl
      - php{{ php_version }}-mbstring
      - php{{ php_version }}-intl
      - php{{ php_version }}-gd
      - php{{ php_version }}-pdo
      - php{{ php_version }}-simplexml
      - php{{ php_version }}-zip
    when: php_install_ready

  - name: Check if Composer is already installed and get version
    command: composer --version
    register: composer_version_check
    failed_when: false
    changed_when: false

  # Extract common conditional patterns for PHP platform and Composer installation
  - name: Set PHP platform and Composer installation status flags
    set_fact:
      php_platform_ready: "{{ (ansible_distribution == 'Ubuntu' and php_ppa is succeeded) or (ansible_distribution == 'Debian' and php_key is succeeded and php_repo is succeeded) }}"
      php_needs_install: "{{ php_version_check.rc != 0 or php_version not in php_version_check.stdout }}"
      composer_not_installed: "{{ composer_version_check.rc != 0 }}"
      composer_installed: "{{ composer_version_check.rc == 0 }}"

  - name: Set PHP and Composer installation chain flags
    set_fact:
      php_install_ready: "{{ php_platform_ready and php_needs_install }}"
      composer_install_ready: "{{ php_platform_ready and composer_not_installed }}"
      composer_build_ready: "{{ php_platform_ready and composer_download is succeeded and composer_not_installed }}"
      composer_packages_ready: "{{ php_platform_ready and (composer_installed or composer_download is succeeded) }}"

  - name: Update Composer to latest version (if already installed)
    command: composer self-update
    when: composer_installed
    failed_when: false

  - name: Download Composer installer
    command: php -r "copy('https://getcomposer.org/installer', '/tmp/composer-setup.php');"
    register: composer_download
    when: composer_install_ready

  - name: Run Composer installer
    command: php /tmp/composer-setup.php
    when: composer_build_ready

  - name: Remove Composer installer
    command: php -r "unlink('/tmp/composer-setup.php');"
    when: composer_build_ready

  - name: Make composer global
    command: mv {{ playbook_dir }}/composer.phar /usr/local/bin/composer
    become: true
    when: composer_build_ready

  - name: Install/Update global Composer packages
    command: composer global require phpmd/phpmd phpstan/phpstan phpstan/phpstan-strict-rules phpstan/phpstan-phpunit shipmonk/phpstan-rules jangregor/phpstan-prophecy
    when: composer_packages_ready
    failed_when: false

