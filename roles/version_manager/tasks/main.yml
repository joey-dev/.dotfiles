---
- name: Smart version management - always fetch latest and compare with installed
  block:

  - name: Check if Neovim is installed and get version
    command: nvim --version
    register: neovim_installed_check
    failed_when: false
    changed_when: false

  - name: Extract installed Neovim version  
    set_fact:
      neovim_installed_version: "{{ neovim_installed_check.stdout | regex_search('NVIM v([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first | default('0.0.0') }}"
    when: neovim_installed_check.rc == 0

  - name: Set Neovim installed version to 0.0.0 if not installed
    set_fact:
      neovim_installed_version: "0.0.0"
    when: neovim_installed_check.rc != 0

  - name: Check if Node.js is installed and get version  
    shell: >
      . {{ ansible_env.HOME }}/.nvm/nvm.sh && node --version 2>/dev/null || echo "none"
    args:
      executable: /bin/zsh
    register: node_installed_check
    failed_when: false
    changed_when: false

  - name: Extract installed Node.js version
    set_fact:
      node_installed_version: "{{ (node_installed_check.stdout | regex_replace('^v', '')) if (node_installed_check.stdout | regex_replace('^v', '')) != '' else '0.0.0' }}"
    when: node_installed_check.stdout != "none"

  - name: Set Node.js installed version to 0.0.0 if not installed
    set_fact:
      node_installed_version: "0.0.0"
    when: node_installed_check.stdout == "none"

  - name: Check if Docker is installed and get version
    command: docker --version
    register: docker_installed_check
    failed_when: false
    changed_when: false

  - name: Extract installed Docker version
    set_fact:
      docker_installed_version: "{{ docker_installed_check.stdout | regex_search('Docker version ([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first | default('0.0.0') }}"
    when: docker_installed_check.rc == 0

  - name: Set Docker installed version to 0.0.0 if not installed
    set_fact:
      docker_installed_version: "0.0.0"
    when: docker_installed_check.rc != 0

  - name: Check if Chrome is installed and get version
    command: google-chrome --version
    register: chrome_installed_check
    failed_when: false
    changed_when: false

  - name: Extract installed Chrome version
    set_fact:
      chrome_installed_version: "{{ chrome_installed_check.stdout | regex_search('Google Chrome ([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first | default('0.0.0') }}"
    when: chrome_installed_check.rc == 0

  - name: Set Chrome installed version to 0.0.0 if not installed
    set_fact:
      chrome_installed_version: "0.0.0"
    when: chrome_installed_check.rc != 0

  # Always fetch latest versions from APIs
  - name: Get latest Neovim version from GitHub releases
    uri:
      url: https://api.github.com/repos/neovim/neovim/releases/latest
      method: GET
      return_content: yes
    register: neovim_latest_response
    failed_when: false

  - name: Set Neovim latest version (from API or fallback)
    set_fact:
      neovim_latest_version: "0.10.2"  # Default fallback
    when: neovim_latest_response is not defined or neovim_latest_response.status != 200 or neovim_latest_response.json is not defined or neovim_latest_response.json.tag_name is not defined

  - name: Set Neovim latest version from API if successful
    set_fact:
      neovim_latest_version: "{{ neovim_latest_response.json.tag_name | regex_replace('^v', '') }}"
    when: 
      - neovim_latest_response is defined
      - neovim_latest_response.status == 200
      - neovim_latest_response.json is defined
      - neovim_latest_response.json.tag_name is defined

  - name: Get latest stable Node.js LTS version
    uri:
      url: https://nodejs.org/dist/index.json
      method: GET
      return_content: yes
    register: nodejs_latest_response
    failed_when: false

  - name: Set Node.js latest version (from API or fallback)
    set_fact:
      node_latest_version: "22.12.0"  # Default fallback
    when: nodejs_latest_response is not defined or nodejs_latest_response.status != 200 or nodejs_latest_response.json is not defined

  - name: Set Node.js latest version from API if successful
    set_fact:
      node_latest_version: "{{ (nodejs_latest_response.json | selectattr('lts', 'ne', false) | first).version | regex_replace('^v', '') }}"
    when: 
      - nodejs_latest_response is defined
      - nodejs_latest_response.status == 200
      - nodejs_latest_response.json is defined
      - nodejs_latest_response.json | length > 0

  - name: Get latest Docker version from GitHub releases
    uri:
      url: https://api.github.com/repos/docker/cli/releases/latest
      method: GET
      return_content: yes
    register: docker_latest_response
    failed_when: false

  - name: Set Docker latest version (from API or fallback)
    set_fact:
      docker_latest_version: "27.3.1"  # Default fallback
    when: docker_latest_response is not defined or docker_latest_response.status != 200 or docker_latest_response.json is not defined or docker_latest_response.json.tag_name is not defined

  - name: Set Docker latest version from API if successful
    set_fact:
      docker_latest_version: "{{ docker_latest_response.json.tag_name | regex_replace('^v', '') }}"
    when: 
      - docker_latest_response is defined
      - docker_latest_response.status == 200
      - docker_latest_response.json is defined
      - docker_latest_response.json.tag_name is defined

  - name: Get latest Google Chrome version (stable channel)
    uri:
      url: https://versionhistory.googleapis.com/v1/chrome/platforms/linux/channels/stable/versions/all/releases?filter=endtime=none&order_by=version%20desc
      method: GET
      return_content: yes
    register: chrome_latest_response
    failed_when: false

  - name: Set Chrome latest version (from API or fallback)
    set_fact:
      chrome_latest_version: "131.0.6778.108"  # Default fallback
    when: chrome_latest_response is not defined or chrome_latest_response.status != 200 or chrome_latest_response.json is not defined or chrome_latest_response.json.releases is not defined or (chrome_latest_response.json.releases | length) == 0

  - name: Set Chrome latest version from API if successful
    set_fact:
      chrome_latest_version: "{{ chrome_latest_response.json.releases[0].version }}"
    when: 
      - chrome_latest_response is defined
      - chrome_latest_response.status == 200
      - chrome_latest_response.json is defined
      - chrome_latest_response.json.releases is defined
      - (chrome_latest_response.json.releases | length) > 0

  # Compare versions and determine if updates are needed
  - name: Ensure all version variables are not empty (safety check)
    set_fact:
      neovim_latest_version: "{{ neovim_latest_version if neovim_latest_version is defined and neovim_latest_version != '' else '0.10.2' }}"
      neovim_installed_version: "{{ neovim_installed_version if neovim_installed_version is defined and neovim_installed_version != '' else '0.0.0' }}"
      node_latest_version: "{{ node_latest_version if node_latest_version is defined and node_latest_version != '' else '22.12.0' }}"
      node_installed_version: "{{ node_installed_version if node_installed_version is defined and node_installed_version != '' else '0.0.0' }}"
      docker_latest_version: "{{ docker_latest_version if docker_latest_version is defined and docker_latest_version != '' else '27.3.1' }}"
      docker_installed_version: "{{ docker_installed_version if docker_installed_version is defined and docker_installed_version != '' else '0.0.0' }}"
      chrome_latest_version: "{{ chrome_latest_version if chrome_latest_version is defined and chrome_latest_version != '' else '131.0.6778.108' }}"
      chrome_installed_version: "{{ chrome_installed_version if chrome_installed_version is defined and chrome_installed_version != '' else '0.0.0' }}"

  - name: Compare Neovim versions
    set_fact:
      neovim_needs_update: "{{ neovim_latest_version is version(neovim_installed_version, '>') }}"

  - name: Compare Node.js versions
    set_fact:
      node_needs_update: "{{ node_latest_version is version(node_installed_version, '>') }}"

  - name: Compare Docker versions
    set_fact:
      docker_needs_update: "{{ docker_latest_version is version(docker_installed_version, '>') }}"

  - name: Compare Chrome versions
    set_fact:
      chrome_needs_update: "{{ chrome_latest_version is version(chrome_installed_version, '>') }}"

  # Set the version variables for use in other roles
  - name: Set version variables for roles
    set_fact:
      neovim_version: "{{ neovim_latest_version }}"
      node_version: "{{ node_latest_version }}"
      docker_version: "{{ docker_latest_version }}"
      chrome_min_version: "{{ chrome_latest_version }}"

  - name: Display smart version management summary
    debug:
      msg: |
        Smart Version Management Summary:
        ==========================================
        Neovim:
          - Installed: {{ neovim_installed_version }}
          - Latest:    {{ neovim_latest_version }}
          - Update:    {{ neovim_needs_update }}
        
        Node.js:
          - Installed: {{ node_installed_version }}
          - Latest:    {{ node_latest_version }}
          - Update:    {{ node_needs_update }}
        
        Docker:
          - Installed: {{ docker_installed_version }}
          - Latest:    {{ docker_latest_version }}
          - Update:    {{ docker_needs_update }}
        
        Chrome:
          - Installed: {{ chrome_installed_version }}
          - Latest:    {{ chrome_latest_version }}
          - Update:    {{ chrome_needs_update }}