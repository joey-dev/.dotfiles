---
- name: Intelligent version management
  block:

  - name: Check if Neovim is installed and get version
    command: nvim --version
    register: neovim_installed_check
    failed_when: false
    changed_when: false

  - name: Check if Node.js is installed and get version  
    shell: >
      . {{ ansible_env.HOME }}/.nvm/nvm.sh && node --version 2>/dev/null || echo "none"
    args:
      executable: /bin/zsh
    register: node_installed_check
    failed_when: false
    changed_when: false

  - name: Check if Docker is installed and get version
    command: docker --version
    register: docker_installed_check
    failed_when: false
    changed_when: false

  - name: Check if Chrome is installed and get version
    command: google-chrome --version
    register: chrome_installed_check
    failed_when: false
    changed_when: false

  - name: Determine if we need to fetch latest versions
    set_fact:
      need_neovim_latest: "{{ auto_update_neovim | bool or neovim_installed_check.rc != 0 or neovim_version == 'latest' }}"
      need_node_latest: "{{ auto_update_node | bool or node_installed_check.stdout == 'none' or node_version == 'latest' }}"
      need_docker_latest: "{{ auto_update_docker | bool or docker_installed_check.rc != 0 or docker_version == 'latest' }}"
      need_chrome_latest: "{{ auto_update_chrome | bool or chrome_installed_check.rc != 0 or chrome_min_version == 'latest' }}"

  - name: Get latest Neovim version from GitHub releases
    uri:
      url: https://api.github.com/repos/neovim/neovim/releases/latest
      method: GET
      return_content: yes
    register: neovim_latest_response
    when: need_neovim_latest | bool
    failed_when: false

  - name: Set Neovim version (latest from API)
    set_fact:
      neovim_version: "{{ neovim_latest_response.json.tag_name | regex_replace('^v', '') }}"
    when: 
      - need_neovim_latest | bool
      - neovim_latest_response is defined 
      - neovim_latest_response.status is defined
      - neovim_latest_response.status == 200
      - neovim_latest_response.json is defined
      - neovim_latest_response.json.tag_name is defined

  - name: Set fallback Neovim version if API failed
    set_fact:
      neovim_version: "0.10"  # Fallback to known stable version
    when: 
      - need_neovim_latest | bool
      - neovim_version == "latest"
      - (neovim_latest_response is not defined or neovim_latest_response.status is not defined or neovim_latest_response.status != 200)

  - name: Get latest stable Node.js LTS version
    uri:
      url: https://nodejs.org/dist/index.json
      method: GET
      return_content: yes
    register: nodejs_latest_response
    when: need_node_latest | bool
    failed_when: false

  - name: Set Node.js version (latest LTS from API)
    set_fact:
      node_version: "{{ (nodejs_latest_response.json | selectattr('lts', 'ne', false) | first).version | regex_replace('^v', '') | regex_replace('\\..*', '') }}"
    when: 
      - need_node_latest | bool
      - nodejs_latest_response is defined 
      - nodejs_latest_response.status is defined
      - nodejs_latest_response.status == 200
      - nodejs_latest_response.json is defined

  - name: Set fallback Node.js version if API failed
    set_fact:
      node_version: "22"  # Fallback to known LTS version
    when: 
      - need_node_latest | bool
      - node_version == "latest"
      - (nodejs_latest_response is not defined or nodejs_latest_response.status is not defined or nodejs_latest_response.status != 200)

  - name: Get latest Docker version from GitHub releases
    uri:
      url: https://api.github.com/repos/docker/cli/releases/latest
      method: GET
      return_content: yes
    register: docker_latest_response
    when: need_docker_latest | bool
    failed_when: false

  - name: Set Docker version (latest from API)
    set_fact:
      docker_version: "{{ docker_latest_response.json.tag_name | regex_replace('^v', '') | regex_replace('\\..*', '') }}"
    when: 
      - need_docker_latest | bool
      - docker_latest_response is defined 
      - docker_latest_response.status is defined
      - docker_latest_response.status == 200
      - docker_latest_response.json is defined
      - docker_latest_response.json.tag_name is defined

  - name: Set fallback Docker version if API failed
    set_fact:
      docker_version: "27"  # Fallback to known stable version
    when: 
      - need_docker_latest | bool
      - docker_version == "latest"
      - (docker_latest_response is not defined or docker_latest_response.status is not defined or docker_latest_response.status != 200)

  - name: Get latest Google Chrome version (stable channel)
    uri:
      url: https://versionhistory.googleapis.com/v1/chrome/platforms/linux/channels/stable/versions/all/releases?filter=endtime=none&order_by=version%20desc
      method: GET
      return_content: yes
    register: chrome_latest_response
    when: need_chrome_latest | bool
    failed_when: false

  - name: Set Chrome version (latest from API)
    set_fact:
      chrome_min_version: "{{ chrome_latest_response.json.releases[0].version | regex_replace('\\..*', '') }}"
    when: 
      - need_chrome_latest | bool
      - chrome_latest_response is defined 
      - chrome_latest_response.status is defined
      - chrome_latest_response.status == 200
      - chrome_latest_response.json is defined
      - chrome_latest_response.json.releases is defined
      - chrome_latest_response.json.releases | length > 0

  - name: Set fallback Chrome version if API failed
    set_fact:
      chrome_min_version: "130"  # Fallback to known stable version
    when: 
      - need_chrome_latest | bool
      - chrome_min_version == "latest"
      - (chrome_latest_response is not defined or chrome_latest_response.status is not defined or chrome_latest_response.status != 200)

  - name: Display version management decisions
    debug:
      msg: |
        Version Management Summary:
        - Neovim: {{ neovim_version }} ({% if need_neovim_latest %}fetched latest{% else %}using configured{% endif %})
        - Node.js: {{ node_version }} ({% if need_node_latest %}fetched latest{% else %}using configured{% endif %})
        - Docker: {{ docker_version }} ({% if need_docker_latest %}fetched latest{% else %}using configured{% endif %})
        - Chrome: {{ chrome_min_version }} ({% if need_chrome_latest %}fetched latest{% else %}using configured{% endif %})
        - DBeaver: {{ dbeaver_min_version }} (using configured)
        
        Auto-update settings:
        - Neovim: {{ auto_update_neovim }}
        - Node.js: {{ auto_update_node }}
        - Docker: {{ auto_update_docker }}
        - Chrome: {{ auto_update_chrome }}