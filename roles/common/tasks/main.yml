- name: Update system
  become: true
  ansible.builtin.apt:
    autoclean: true
    autoremove: true
    update_cache: true
    upgrade: true

- name: Install common tools
  become: true
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - wget
    - curl
    - unzip
    - xclip
    - flameshot
    - brightnessctl
    - rofi
    - fzf
    - uuid-dev
    - bat
    - python3-dev
    - python3-pip
    - python3-setuptools
    - python3-venv
    - ncdu
    - git

- name: Install common tools with python (Ubuntu)
  become: true
  shell: pip3 install {{ item }} --user
  loop:
    - thefuck
  when: ansible_distribution == "Ubuntu"

- name: Install common tools with apt (Debian)
  become: true
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - thefuck
    - python3-debian
  when: ansible_distribution == "Debian"

- name: Remove scripts folder
  file:
    path: "{{ ansible_env.HOME }}/scripts"
    state: absent

- name: Create scripts folder
  file:
    path: "{{ ansible_env.HOME }}/scripts"
    state: directory

- name: Check if Google Chrome is already installed and get version
  command: google-chrome --version
  register: chrome_version_check
  failed_when: false
  changed_when: false

- name: Extract installed Chrome version
  set_fact:
    chrome_installed_version: "{{ chrome_version_check.stdout | regex_search('Google Chrome ([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | default(['0.0.0']) | first }}"
  when: chrome_version_check.rc == 0

- name: Set Chrome installed version to 0.0.0 if not installed
  set_fact:
    chrome_installed_version: "0.0.0"
  when: chrome_version_check.rc != 0

# Fetch latest Chrome version if configured for automatic updates
- name: Get latest Google Chrome version (stable channel)
  uri:
    url: https://versionhistory.googleapis.com/v1/chrome/platforms/linux/channels/stable/versions/all/releases?filter=endtime=none&order_by=version%20desc
    method: GET
    return_content: yes
  register: chrome_latest_response
  failed_when: false
  when: chrome_version == "latest"

- name: Set Chrome target version (from API or static)
  set_fact:
    chrome_target_version: "{{ chrome_version if chrome_version != 'latest' else (chrome_latest_response.json.releases[0].version if chrome_latest_response is succeeded and chrome_latest_response.json.releases is defined and (chrome_latest_response.json.releases | length) > 0 else '131.0.6778.108') }}"

- name: Compare Chrome versions and determine if update needed
  set_fact:
    chrome_needs_update: "{{ chrome_target_version is version(chrome_installed_version, '>') }}"

# Extract common conditional patterns
- name: Set Chrome installation status flags
  set_fact:
    chrome_download_ready: "{{ chrome_download is succeeded }}"

- name: Display Chrome version comparison
  debug:
    msg: |
      Chrome Version Check:
      - Installed: {{ chrome_installed_version }}
      - Target:    {{ chrome_target_version }}
      - Update:    {{ chrome_needs_update }}

- name: Download Google Chrome .deb file
  get_url:
    url: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    dest: /tmp/google-chrome-stable_current_amd64.deb
  register: chrome_download
  when: chrome_needs_update

- name: Install Google Chrome from .deb file
  apt:
    deb: /tmp/google-chrome-stable_current_amd64.deb
    state: present
  become: yes
  when: chrome_download_ready

- name: Create Downloads folder
  file:
    path: "{{ ansible_env.HOME }}/Downloads"
    state: directory

